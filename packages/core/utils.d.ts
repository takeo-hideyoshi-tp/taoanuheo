export declare const arrayPush: (...items: any[]) => number;
export declare const innerHTML: string;
export declare const hasOwnProperty: (v: string | number | symbol) => boolean;
export declare const gSBU: string;
export declare const gDSFP: string;
export declare const hasSymbol: (key: string) => symbol;
export declare const effects: any[];
export declare const topFibers: any[];
export declare const topNodes: any[];
export declare const emptyArray: any[];
export declare const emptyObject: {};
export declare const REACT_ELEMENT_TYPE: number | symbol;
export declare function noop(): void;
export declare function Fragment(props: any): any;
export declare function returnFalse(): boolean;
export declare function returnTrue(): boolean;
export declare function resetStack(info: Object<string>, any: any): any;
export declare function get(key: any): any;
export declare let __type: () => string;
export declare function getWindow(): {};
export declare function isMounted(instance: any): boolean;
export declare function toWarnDev(msg: any, deprecated: any): void;
export declare function extend(obj: any, props: any): any;
export declare function inherit(SubClass: any, SupClass: any): any;
export declare function miniCreateClass(ctor: any, superClass: any, methods: any, statics: any): any;
export declare function toLowerCase(s: any): any;
export declare function isFn(obj: any): boolean;
export declare function oneObject(array: any, val: any): {};
export declare function camelize(target: any): any;
export declare function firstLetterLower(str: any): any;
export declare function typeNumber(data: any): any;
export declare let toArray: {
    <T>(arrayLike: ArrayLike<T>): T[];
    <T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
    <T>(iterable: Iterable<T> | ArrayLike<T>): T[];
    <T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
};
