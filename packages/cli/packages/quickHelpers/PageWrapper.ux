<template>
  <div style="width:100%;padding-bottom: {{tabBar.list.length?'110px': '0px'}}; background-color:{{backgroundColor}};">
    <block if="pageRefresh">
      <refresh refreshing="{{pageRefreshing}}" @refresh="onPullDownRefresh">
        <list @scroll="onPageScroll" @scrollbottom="onReachBottom">
          <list-item type='a'>
            <slot></slot>
          </list-item>
        </list>
      </refresh>
    </block>
    <block elif="true">
      <slot></slot>
    </block>
    <div class="tabBar" if="{{tabBar.list.length}}" style="background-color:{{tabBar.backgroundColor}}">
      <div class="tab" for="(index, item) in tabBar.list" @click="onSelected(item)">
        <image src="{{ item.selected ? item.selectedIconPath : item.iconPath }}" />
        <text style="color:{{ item.selected ? tabBar.selectedColor: tabBar.color }};font-size: 20px;">
          {{item.text}}
        </text>
      </div>
    </div>
  </div>
</template>
<style>
  .tabBar {
    border-style: solid;
    border-color: #ddd;
    border-top-width: 1px;
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 110px;
  }

  .tabBar .tab {
    flex: 1;
    margin: 10px;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .tabBar .tab image {
    width: 45px;
    height: 45px;
  }

  .tabBar .tab a {
    margin: 10px;
    border: 1px solid #eeeeee;
  }
</style>
<script>
  import React from '../../ReactQuick.js';
  var { getCurrentPage } = React
  export default {
    data() {
      return {
        tabBar: {},
        pagePath: "",
        backgroundColor: "#ffffff",
        pageRefresh: false,
        pageRefreshing: false,
      };
    },

    onInit() {
      this.tabBar = {
        list: []
      }
      setTitleAndTabs(this, this.$app);
    },
    onShow() {
      setTitleAndTabs(this, this.$app);
    },
    onReachBottom(e) {
      var react = getCurrentPage();
      console.log('onReachBottom',react)
      if (react.onReachBottom) {
        react.onReachBottom(e)
      }
      React.api.showToast({ title: 'reach bottom' });
    },
    onPageScroll(e) {
      var react = getCurrentPage();
      if (react.onPageScroll) {
        react.onPageScroll(e)
      }
    },

    onMenuPress: function () {
      React.api.showActionSheet({
        itemList: [
          '分享',
          'item2',
          'item3',
          'item4'
        ],
        success: function (data) {
          console.log('handling success', data)
          if (data.index === 0) {
            // 分享
            React.api.share({
              type: 'text/html',
              data: '<b>bold</b>',
              success: function (data) {
                console.log('handling success')
              },
              fail: function (data, code) {
                console.log(`handling fail, code = ${code}`)
              }
            })
          }
        },
        cancel: function () {
          console.log('handling cancel')
        },
        fail: function (data, code) {
          console.log(`handling fail, code = ${code}`)
        }
      })
    },
    onSelected(item) {
      this.pagePath = item.pagePath;
      if(item.selected){
        return false;
      }
      var page = getCurrentPage();
      if (page.onTabItemTap) {
        page.onTabItemTap(item)
      }
      React.api.navigateTo({
        url: item.pagePath
      })
    },
    onPullDownRefresh(e) {
      var app = this.$app;
      var appConfig = getAppConfig(app.$def);
      var pageConfig = Object(app.$$pageConfig);
      var enable = "enablePullDownRefresh";
      var isOk = pageConfig[enable] || appConfig[enable];
      var page = getCurrentPage();
      if (isOk && page.onPullDownRefresh) {
        page.onPullDownRefresh(e)
        React.api.showToast({ title: 'refreshed' });
      }
      this.pageRefreshing = true
      setTimeout(() => {
        this.pageRefreshing = false
      }, 3000)
    },
    onMenuPress: function () {
      React.api.showActionSheet({
        itemList: [
          '分享',
          'item2',
          'item3',
          'item4'
        ],
        success: function (data) {
          console.log('handling success', data)
          if (data.index === 0) {
            // 分享
            React.api.share({
              type: 'text/html',
              data: '<b>bold</b>',
              success: function (data) {
                console.log('handling success')
              },
              fail: function (data, code) {
                console.log(`handling fail, code = ${code}`)
              }
            })
          }
        },
        cancel: function () {
          console.log('handling cancel')
        },
        fail: function (data, code) {
          console.log(`handling fail, code = ${code}`)
        }
      })
    }
  };

  function setTitleAndTabs(instance, app) {
      instance.pagePath = app.$$pagePath;
      var appConfig = getAppConfig(app.$def)
      var pageConfig = Object(app.$$pageConfig);
      var mixin = Object.assign({
        navigationBarTitleText: "",
        navigationBarTextStyle: "white",
        navigationBarBackgroundColor: "#000000"
      }, appConfig, pageConfig);
      instance.backgroundColor = mixin.backgroundColor || "#ffffff"
      instance.pageRefresh = !!mixin.enablePullDownRefresh;

      instance.$page.setTitleBar({
          text: mixin.navigationBarTitleText,
          textColor: mixin.navigationBarTextStyle,
          backgroundColor: mixin.navigationBarBackgroundColor,
          menu: mixin.menu
      })
      
      var tabBar = pageConfig.tabBar || appConfig.tabBar;
      if (tabBar && tabBar.list && tabBar.list.length) {
          tabBar.backgroundColor = tabBar.backgroundColor || "#f9faf5";
          tabBar.color = tabBar.color || "#000";
          tabBar.selectedColor = tabBar.selectedColor || "#48adc4";
          instance.tabBar = tabBar;
          tabBar.list.forEach(function(el, i){
            if(!el.pagePath){
               console.warn(`tabBar.list[${i}] miss pagePath`, el);//eslint-disable-line
               return
            }
            el.selected = handlePageUri(el.pagePath) === handlePageUri(instance.pagePath);
          })
      }   
  }
  function getAppConfig(def){
    if(def.config){
      return def.config
    }
    for(var i in def){
      var val = def[i];
      if(val && val.config){
        return val.config
      }
    }
    return {}
  }

  // 处理/pages/这种形式的pagePath
  function handlePageUri(href) {
    return href.slice(href.indexOf('/pages') + 1);
  }
</script>
